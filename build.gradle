plugins {
    id 'java'
    id 'io.github.goooler.shadow' version '8.1.8'
    id 'maven-publish'
}

group = 'fr.traqueur.factions'
version = property('version')

project.ext {
    testFolder = property("test-folder")
    archiveFolder = file("archive/")
    targetFolder = file("target/")
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'io.github.goooler.shadow'

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(21))
        }
    }

    repositories {
        //mavenLocal()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven {
            name = "spigotmc-repo"
            url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/groups/public/"
        }
    }

    dependencies {

        //implementation 'fr.maxlego08.sarah:SarahORM:1.9'
        implementation 'com.github.Maxlego08:Sarah:develop-SNAPSHOT'
        implementation "net.kyori:adventure-text-minimessage:4.17.0"
        implementation "net.kyori:adventure-api:4.17.0"
        implementation "net.kyori:adventure-platform-bukkit:4.3.4"
        implementation "com.github.Traqueur-dev:CommandsAPI:1.5.0"
        //implementation "fr.traqueur:CommandsAPI:1.4.2"
    }

    compileJava.options.encoding = 'UTF-8'

    tasks.withType(JavaCompile).tap {
        configureEach {
            options.encoding = 'UTF-8'
        }
    }
}

subprojects {

    repositories {
        maven {
            name = "papermc-repo"
            url = "https://repo.papermc.io/repository/maven-public/"
        }
    }

    shadowJar {
        archiveFileName = "${project.name}.jar"
        destinationDirectory = rootProject.archiveFolder
    }

}

repositories {
    maven {
        name = "devmart-other"
        url = "https://nexuslite.gcnt.net/repos/other/"
    }
}

dependencies {
    compileOnly "org.spigotmc:spigot-api:1.21-R0.1-SNAPSHOT"

    implementation fileTree(rootProject.archiveFolder.getAbsolutePath())
    implementation(project(":FactionsAPI"))

    rootProject.subprojects.findAll { it.path.startsWith(':FactionsPlatforms:') }.each { subproject ->
        implementation project(subproject.path)
    }

    implementation 'org.mongodb:mongodb-driver-sync:5.1.2'
    implementation "com.tcoded:FoliaLib:0.3.4"
    implementation "dev.dejvokep:boosted-yaml:1.3.6"
    implementation 'org.bstats:bstats-bukkit:3.0.0'
}

jar {
    from {
        for (File file : rootProject.archiveFolder.listFiles()) {
            zipTree(file)
        }
    }
}

processResources {
    outputs.upToDateWhen { false }
    def props = [version: version,
    global_config_version: global_config_version,
    ranks_config_version: ranks_config_version, lang_config_version: lang_config_version,
                 lang_settings_config_version: lang_settings_config_version]
    inputs.properties props
    filesMatching('**/*.yml') {
        expand props
    }
}

shadowJar {
    dependsOn(jar)

    relocate 'org.slf4j', "fr.traqueur.modernfactions.api.slf4j"
    relocate 'org.jetbrains', "fr.traqueur.modernfactions.api.jetbrains"
    relocate 'org.intellij', "fr.traqueur.modernfactions.api.intellij"
    relocate 'org.bson', "fr.traqueur.modernfactions.api.bson"
    relocate 'com.zaxxer.hikari', 'fr.traqueur.modernfactions.api.hikari'
    relocate 'net.kyori', "fr.traqueur.modernfactions.api.adventure"
    relocate 'com.mongodb', "fr.traqueur.modernfactions.api.mongodb"
    relocate 'fr.maxlego08.sarah', "fr.traqueur.modernfactions.api.orm"
    relocate 'fr.traqueur.commands', 'fr.traqueur.modernfactions.api.commands'
    relocate 'org.bstats', 'fr.traqueur.modernfactions.api.bstats'
    relocate 'com.tcoded.folialib', 'fr.traqueur.modernfactions.api.platform.folia'
    relocate 'dev.dejvokep.boostedyaml', 'fr.traqueur.modernfactions.api.boostedyaml'

    archiveFileName = rootProject.name + "-" + rootProject.version + ".jar"

    delete fileTree(rootProject.targetFolder.getAbsolutePath())

    exclude '*exclude.jar'

    destinationDirectory = rootProject.targetFolder
    from sourceSets.getByName("main").output
    configurations = [project.configurations.getByName("runtimeClasspath")]
}

clean {
    delete rootProject.archiveFolder
}

build {
    dependsOn shadowJar
    dependsOn clean
}

tasks.register('copyFiles', Copy) {
    from "${rootProject.targetFolder}"
    into rootProject.testFolder
}

build.finalizedBy(copyFiles)

publish.shouldRunAfter shadowJar
shadowJar.shouldRunAfter build
build.shouldRunAfter subprojects.build

shadowJar.dependsOn subprojects.build
compileJava.dependsOn childProjects.values().shadowJar

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}